name: Build and Release NemoMark Desktop

on:
  push:
    tags: ["v*"]  # 只在打tag时触发 (格式: v1.0.0)
  workflow_dispatch:  # 允许手动触发

env:
  APP_NAME: NemoMark_Desktop
  BUILD_DIR: dist

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Building version: ${version}"

  build:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Anaconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.11"
          channels: conda-forge,defaults
          activate-environment: nemomark
          auto-update-conda: true

      - name: Install dependencies
        shell: bash
        run: |
          conda install -y nuitka markdown pyside6 -c conda-forge
          conda list

      - name: Build for Windows
        if: runner.os == 'Windows'
        shell: bash 
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --windows-icon-from-ico=icon.ico \
            --output-dir=$BUILD_DIR \
            --windows-product-version=${{ needs.setup.outputs.version }} \
            --windows-file-version=${{ needs.setup.outputs.version }} \
            ${APP_NAME}.py
          
          # 签名Windows可执行文件 (需要设置SIGNTOOL_SECRET)
          if [[ -n "${{ secrets.SIGNTOOL_SECRET }}" ]]; then
            echo "Signing Windows executable..."
            signtool sign /fd sha256 /f "${{ secrets.SIGNTOOL_CERT }}" /p "${{ secrets.SIGNTOOL_SECRET }}" \
              /tr http://timestamp.digicert.com /td sha256 \
              $BUILD_DIR/${APP_NAME}.exe
          fi

          mv $BUILD_DIR/${APP_NAME}.exe $BUILD_DIR/${APP_NAME}_Windows_${{ matrix.arch }}_${{ needs.setup.outputs.version }}.exe

      - name: Build for macOS
        if: runner.os == 'macOS'
        shell: bash 
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --macos-create-app-bundle \
            --output-dir=$BUILD_DIR \
            ${APP_NAME}.py
          
          # 签名macOS应用 (需要设置MACOS_CERTIFICATE)
          if [[ -n "${{ secrets.MACOS_CERTIFICATE }}" ]]; then
            echo "Signing macOS app..."
            codesign --deep --force --options runtime \
              --sign "${{ secrets.MACOS_CERTIFICATE }}" \
              $BUILD_DIR/${APP_NAME}.app
          fi

          mv $BUILD_DIR/${APP_NAME}.app $BUILD_DIR/${APP_NAME}_macOS_${{ matrix.arch }}_${{ needs.setup.outputs.version }}.app

      - name: Build for Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --output-dir=$BUILD_DIR \
            ${APP_NAME}.py
          
          mv $BUILD_DIR/${APP_NAME}.bin $BUILD_DIR/${APP_NAME}_Linux_${{ matrix.arch }}_${{ needs.setup.outputs.version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}
          path: $BUILD_DIR/*

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: NemoMark Desktop ${{ needs.setup.outputs.version }}
          body: |
            ### 版本 ${{ needs.setup.outputs.version }}
            - 支持 Windows/macOS/Linux
            - 包含 x64 和 arm64 架构
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
