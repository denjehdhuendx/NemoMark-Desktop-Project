name: Build and Release NemoMark Desktop (Cross-Platform)

on:
  push:
    tags: ["v*"]  # 触发条件：v开头的tag (如 v1.0.0)
  workflow_dispatch:  # 允许手动触发

env:
  APP_NAME: NemoMark_Desktop
  BUILD_DIR: dist
  ARTIFACT_DIR: artifacts

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Building version: ${version}"

  build:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            arch: x64
            artifact_name: Windows_x64
            ext: exe
          - os: windows-latest
            arch: arm64
            artifact_name: Windows_ARM64
            ext: exe
          # macOS builds
          - os: macos-latest
            arch: x86_64
            artifact_name: macOS_x64
            ext: app
          - os: macos-latest
            arch: arm64
            artifact_name: macOS_ARM64
            ext: app
          # Linux builds
          - os: ubuntu-latest
            arch: x86_64
            artifact_name: Linux_x64
            ext: bin
          - os: ubuntu-latest
            arch: arm64
            artifact_name: Linux_ARM64
            ext: bin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.11"
          channels: conda-forge,defaults
          activate-environment: nemomark
          auto-update-conda: true

      - name: Install dependencies
        shell: bash 
        run: |
          conda install -y nuitka markdown pyside6 -c conda-forge
          conda list

      - name: Build Windows executable
        if: runner.os == 'Windows'
        shell: bash 
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --windows-icon-from-ico=icon.ico \
            --output-dir=$BUILD_DIR \
            --windows-product-version=${{ needs.setup.outputs.version }} \
            --windows-file-version=${{ needs.setup.outputs.version }} \
            ${APP_NAME}.py

          # Code signing for Windows
          if [[ -n "${{ secrets.WINDOWS_SIGNING_CERT }}" ]]; then
            echo "Signing Windows executable..."
            osslsigncode sign -certs "${{ secrets.WINDOWS_SIGNING_CERT }}" \
              -key "${{ secrets.WINDOWS_SIGNING_KEY }}" \
              -n "NemoMark Desktop" \
              -i "https://github.com/${{ github.repository }}" \
              -in "$BUILD_DIR/${APP_NAME}.exe" \
              -out "$BUILD_DIR/${APP_NAME}_signed.exe"
            mv "$BUILD_DIR/${APP_NAME}_signed.exe" "$BUILD_DIR/${APP_NAME}.exe"
          fi

          mkdir -p $ARTIFACT_DIR
          mv "$BUILD_DIR/${APP_NAME}.exe" "$ARTIFACT_DIR/${APP_NAME}_${{ matrix.artifact_name }}_${{ needs.setup.outputs.version }}.${{ matrix.ext }}"

      - name: Build macOS app
        if: runner.os == 'macOS'
        shell: bash 
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --macos-create-app-bundle \
            --output-dir=$BUILD_DIR \
            --macos-app-icon=icon.icns \
            ${APP_NAME}.py

          # Code signing for macOS
          if [[ -n "${{ secrets.MACOS_DEVELOPER_ID }}" ]]; then
            echo "Signing macOS app..."
            codesign --deep --force --options runtime \
              --sign "Developer ID Application: ${{ secrets.MACOS_DEVELOPER_ID }}" \
              --timestamp \
              "$BUILD_DIR/${APP_NAME}.app"
          fi

          mkdir -p $ARTIFACT_DIR
          mv "$BUILD_DIR/${APP_NAME}.app" "$ARTIFACT_DIR/${APP_NAME}_${{ matrix.artifact_name }}_${{ needs.setup.outputs.version }}.${{ matrix.ext }}"

      - name: Build Linux binary
        if: runner.os == 'Linux'
        shell: bash 
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --output-dir=$BUILD_DIR \
            ${APP_NAME}.py

          mkdir -p $ARTIFACT_DIR
          mv "$BUILD_DIR/${APP_NAME}.bin" "$ARTIFACT_DIR/${APP_NAME}_${{ matrix.artifact_name }}_${{ needs.setup.outputs.version }}.${{ matrix.ext }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: $ARTIFACT_DIR/*
          retention-days: 1

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: $ARTIFACT_DIR

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: NemoMark Desktop ${{ needs.setup.outputs.version }}
          body: |
            ### Version ${{ needs.setup.outputs.version }}
            - **Windows**: x64 & ARM64
            - **macOS**: Intel & Apple Silicon
            - **Linux**: x64 & ARM64
          draft: false
          prerelease: false
          files: |
            $ARTIFACT_DIR/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
